// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: idl/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceService_Create_FullMethodName = "/mesh.ServiceService/Create"
	ServiceService_Remove_FullMethodName = "/mesh.ServiceService/Remove"
	ServiceService_Inputs_FullMethodName = "/mesh.ServiceService/Inputs"
	ServiceService_Deploy_FullMethodName = "/mesh.ServiceService/Deploy"
	ServiceService_Info_FullMethodName   = "/mesh.ServiceService/Info"
	ServiceService_List_FullMethodName   = "/mesh.ServiceService/List"
)

// ServiceServiceClient is the client API for ServiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceServiceClient interface {
	Create(ctx context.Context, in *ServiceCreateRequest, opts ...grpc.CallOption) (*ServiceCreateReply, error)
	Remove(ctx context.Context, in *ServiceRemoveRequest, opts ...grpc.CallOption) (*ServiceRemoveReply, error)
	Inputs(ctx context.Context, in *ServiceInputsRequest, opts ...grpc.CallOption) (*ServiceInputsReply, error)
	Deploy(ctx context.Context, in *ServiceDeployRequest, opts ...grpc.CallOption) (*ServiceDeployReply, error)
	Info(ctx context.Context, in *ServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfoReply, error)
	List(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*ServiceListReply, error)
}

type serviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceServiceClient(cc grpc.ClientConnInterface) ServiceServiceClient {
	return &serviceServiceClient{cc}
}

func (c *serviceServiceClient) Create(ctx context.Context, in *ServiceCreateRequest, opts ...grpc.CallOption) (*ServiceCreateReply, error) {
	out := new(ServiceCreateReply)
	err := c.cc.Invoke(ctx, ServiceService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) Remove(ctx context.Context, in *ServiceRemoveRequest, opts ...grpc.CallOption) (*ServiceRemoveReply, error) {
	out := new(ServiceRemoveReply)
	err := c.cc.Invoke(ctx, ServiceService_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) Inputs(ctx context.Context, in *ServiceInputsRequest, opts ...grpc.CallOption) (*ServiceInputsReply, error) {
	out := new(ServiceInputsReply)
	err := c.cc.Invoke(ctx, ServiceService_Inputs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) Deploy(ctx context.Context, in *ServiceDeployRequest, opts ...grpc.CallOption) (*ServiceDeployReply, error) {
	out := new(ServiceDeployReply)
	err := c.cc.Invoke(ctx, ServiceService_Deploy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) Info(ctx context.Context, in *ServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfoReply, error) {
	out := new(ServiceInfoReply)
	err := c.cc.Invoke(ctx, ServiceService_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) List(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*ServiceListReply, error) {
	out := new(ServiceListReply)
	err := c.cc.Invoke(ctx, ServiceService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServiceServer is the server API for ServiceService service.
// All implementations must embed UnimplementedServiceServiceServer
// for forward compatibility
type ServiceServiceServer interface {
	Create(context.Context, *ServiceCreateRequest) (*ServiceCreateReply, error)
	Remove(context.Context, *ServiceRemoveRequest) (*ServiceRemoveReply, error)
	Inputs(context.Context, *ServiceInputsRequest) (*ServiceInputsReply, error)
	Deploy(context.Context, *ServiceDeployRequest) (*ServiceDeployReply, error)
	Info(context.Context, *ServiceInfoRequest) (*ServiceInfoReply, error)
	List(context.Context, *ServiceListRequest) (*ServiceListReply, error)
	mustEmbedUnimplementedServiceServiceServer()
}

// UnimplementedServiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServiceServer struct {
}

func (UnimplementedServiceServiceServer) Create(context.Context, *ServiceCreateRequest) (*ServiceCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServiceServiceServer) Remove(context.Context, *ServiceRemoveRequest) (*ServiceRemoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedServiceServiceServer) Inputs(context.Context, *ServiceInputsRequest) (*ServiceInputsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inputs not implemented")
}
func (UnimplementedServiceServiceServer) Deploy(context.Context, *ServiceDeployRequest) (*ServiceDeployReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedServiceServiceServer) Info(context.Context, *ServiceInfoRequest) (*ServiceInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedServiceServiceServer) List(context.Context, *ServiceListRequest) (*ServiceListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedServiceServiceServer) mustEmbedUnimplementedServiceServiceServer() {}

// UnsafeServiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServiceServer will
// result in compilation errors.
type UnsafeServiceServiceServer interface {
	mustEmbedUnimplementedServiceServiceServer()
}

func RegisterServiceServiceServer(s grpc.ServiceRegistrar, srv ServiceServiceServer) {
	s.RegisterService(&ServiceService_ServiceDesc, srv)
}

func _ServiceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).Create(ctx, req.(*ServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceService_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).Remove(ctx, req.(*ServiceRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_Inputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).Inputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceService_Inputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).Inputs(ctx, req.(*ServiceInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceService_Deploy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).Deploy(ctx, req.(*ServiceDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceService_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).Info(ctx, req.(*ServiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).List(ctx, req.(*ServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceService_ServiceDesc is the grpc.ServiceDesc for ServiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mesh.ServiceService",
	HandlerType: (*ServiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ServiceService_Create_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _ServiceService_Remove_Handler,
		},
		{
			MethodName: "Inputs",
			Handler:    _ServiceService_Inputs_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _ServiceService_Deploy_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _ServiceService_Info_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ServiceService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/service.proto",
}
